const nodemailer = require("nodemailer");
const fs = require("fs");
const path = require("path");
const db = require("../firestore");


require("dotenv").config();

const EMAIL_TO = "csm.to@tessan.io";
const LOG_FILE = path.join(__dirname, "..", "logs", "email-log.txt");

// Cr√©ation du transporteur SMTP (Gmail ou autre service)
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "loudo.sutton@tessan.io",
    pass: process.env.SMTP_PASSWORD,
  },
});

/**
 * V√©rifie si un utilisateur a d√©j√† envoy√© trop d'emails r√©cemment (limit√© √† 10/h).
 */
function checkRateLimit(userEmail) {
  try {
    const now = Date.now();
    const logData = fs.existsSync(LOG_FILE) ? fs.readFileSync(LOG_FILE, "utf-8") : "";
    const logs = logData
      .split("\n")
      .filter(Boolean)
      .map(line => JSON.parse(line))
      .filter(entry => entry.email === userEmail && now - entry.timestamp < 3600 * 1000); // 1h

    return logs.length < 10;
  } catch (err) {
    console.error("Erreur lecture des logs :", err);
    return true;
  }
}

/**
 * Enregistre un envoi d'email dans les logs
 */
function logEmail(userEmail, cancelledIds) {
  try {
    const entry = {
      email: userEmail,
      timestamp: Date.now(),
      cancelled: cancelledIds,
    };
    fs.mkdirSync(path.dirname(LOG_FILE), { recursive: true });
    fs.appendFileSync(LOG_FILE, JSON.stringify(entry) + "\n");
  } catch (err) {
    console.error("Erreur lors du logging email :", err);
  }
}

/**
 * Envoie un mail √† Loudo quand un utilisateur (non admin) annule des cr√©neaux
 */
async function sendCancellationAlert(userEmail, cancelledIds) {
  if (!checkRateLimit(userEmail)) {
    console.warn(`üìõ Email NON envoy√© ‚Äî ${userEmail} a d√©pass√© la limite`);
    return;
  }

  const bookings = [];

  for (const id of cancelledIds) {
    try {
      const doc = await db.collection("bookings-ortho").doc(id).get();
      if (doc.exists) {
        const data = doc.data();
        bookings.push(`${data.date} √† ${data.time} (${data.email})`);
      } else {
        bookings.push(`Cr√©neau introuvable (ID: ${id})`);
      }
    } catch (err) {
      bookings.push(`Erreur sur ID ${id} : ${err.message}`);
    }
  }

  const htmlBody = `
    <div style="font-family: sans-serif; font-size: 15px;">
      <p><strong>Utilisateur :</strong> ${userEmail}</p>
      <p><strong>Cr√©neaux annul√©s :</strong></p>
      <ul>
        ${bookings.map(c => `<li>${c}</li>`).join("")}
      </ul>
      <p style="font-size: 13px; color: #888;">Notification automatique DoctoLoudo</p>
    </div>
  `;

  const mailOptions = {
    from: '"DoctoLoudo" <no-reply@tessan.io>',
    to: EMAIL_TO,
    subject: "‚ùó Annulation de cr√©neau par un utilisateur ortho",
    html: htmlBody,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log("üìß Email d'annulation envoy√© avec succ√®s !");
  } catch (err) {
    console.error("‚ùå Erreur envoi mail :", err);
  }

  logEmail(userEmail, cancelledIds) 

}

module.exports = { sendCancellationAlert };
